name: CI/CD Pipeline

on:
  push:
    branches:
      - release/final
  pull_request:
    branches:
      - release/final

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.REMOTE_DOCKER_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH Command to deploy Docker image
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Log in to Docker Hub (if the server requires authentication)
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Stop and remove the current container (if any)
            docker stop ${{ secrets.DOCKER_CONTAINER }} || true
            docker rm ${{ secrets.DOCKER_CONTAINER }} || true

            # Remove unused Docker images
            docker image prune -a

            # Pull the latest Docker image
            docker pull ${{ secrets.REMOTE_DOCKER_IMAGE }}

            # Start a new container with the new image
            docker run -d \
              -v /git-repo/images:/app/src/main/resources/static/images \
              --name ${{ secrets.DOCKER_CONTAINER }} \
              -p 9999:9999 \
              --restart unless-stopped \
              ${{ secrets.REMOTE_DOCKER_IMAGE }}

            # Check logs to confirm the container is running correctly
            docker logs ${{ secrets.DOCKER_CONTAINER }}

          debug: true